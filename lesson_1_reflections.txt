How did viewing a diff between two versions of 
a file help you see the bug that was introduced?

It was kind of hard to find. 
I would imagine it would become increasingly hard if the file is even larger 
and there are more changes at once.

How could having easy access to the entire history of a file make
you a more efficient programmer in the long term?

I would be able to quickly move back to a older version if I take my project 
in the wrong direction e.g. if I've chosen a way to implement something that
doesn't work like I have thought. I would not have to be afraid of losing
a a lot of time in case I make a mistake.

What do you think are the pros and cons of manually choosing when to create a commit, 
like you do in Git, vs having versions automatically saved, like Google Docs does?

You can chose the size of a commit. Automatically saved version could also not even
be finished / maybe won't compile. You can put some kind of logic behind your commits.

Why do you think some version control systems, like Git, allow saving multiple files 
in one commit, while others, like Google Docs, treat each file separately?

Projects done in Google Docs might not require saving multiple files in one commit. 
Also automatic saving like in Google Docs might not be optimal for saving multiple 
files.

How can you use the commands git log and git diff to view the history of files?
I can use git log to see all commits. With git diff I can find the lines added and deleted - 
I need to put the earlier commit first -> git diff earlier later. I will see which lines were
added/deleted.

How might using version control make you more confident to make 
changes that could break something?

Beeing able to revert back to an earlier state means I can quickly identify when and how
a possible error occured and fix it. It won't be as time consuming as reviewing the whole code.

Now that you have your workspace set up, what do you want to try using Git for?
Programming projects, maybe even for papers I'm writing.