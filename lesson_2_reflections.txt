What happens when you initialize a repository? Why do you need to do it?
It registers this folder as  git-folder so you can start tracking changes. 
It creates a ".git"-folder with all necesarry metadata.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
It holds files that you will make commits on, while working directory only has untracked files. When multiple files that are logically separated are edited you can choose to apply only one of these files
to one commit

How can you use the staging area to make sure you have one commit per logical
change?
I can stage a file when a logical change has been written.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
experimental functions, when I am unsure if some code will work, different languages, 
maybe generally just different features if I'm working on them at the same time
Branches would separate them into different "stages", so if one feature currently breaks
the whole program I can still use a other "stage" to show off my program or work on other
things


How do the diagrams help you visualize the branch structure?
thinking of commits as having parents can be easily understood by drawing arrows between the commits
it really helps to understanding detached heads

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?